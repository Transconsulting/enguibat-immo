{"version":3,"file":"src_app_custum_authentification_authentication_module_ts.js","mappings":"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","sources":["./src/_services/auth.service.ts","./src/app/custum/authentification/authentication.module.ts","./src/app/custum/authentification/login/login.component.ts","./src/app/custum/authentification/register/register.component.ts","./src/app/models/user.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { User } from \"src/app/models/user\";\r\nimport { environment } from \"src/environments/environment\";\r\nconst AUTH_API = environment.url_backend + `/authenticate`;\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ \"Content-Type\": \"application/json\" }),\r\n};\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class AuthService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(username: string, password: string) {\r\n    console.log(`user: ${username}`);\r\n    return this.http\r\n      // .post(AUTH_API, { username, password }, httpOptions)\r\n      .post(\"http://localhost:8080/authenticate\", { username, password }, httpOptions)\r\n      .toPromise()\r\n      .then((res) => res);\r\n  }\r\n\r\n  register(user: User): Observable<any> {\r\n    return this.http.post(\r\n      \"http://localhost:8080/\" + \"utilisateur\",\r\n      user,\r\n      httpOptions\r\n    );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SharedService } from 'src/_services/shared.service';\r\n\r\nexport const routes: Routes = [\r\n  { path: '', redirectTo: '/custum/login', pathMatch: 'full' },\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'register', component: RegisterComponent  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent,\r\n    RegisterComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    RouterModule.forChild(routes),\r\n    SharedModule\r\n  ],\r\n  providers: [SharedService]\r\n})\r\nexport class AuthenticationModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UntypedFormGroup, UntypedFormBuilder, Validators, NgForm} from '@angular/forms';\r\nimport { Router } from '@angular/router'; \r\nimport { AuthService } from 'src/_services/auth.service';\r\nimport { SharedService } from 'src/_services/shared.service';\r\nimport { TokenStorageService } from 'src/_services/token-storage.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  form: any = {\r\n    username: null,\r\n    password: null,\r\n  };\r\n  isLoggedIn = false;\r\n  isLoginFailed = false;\r\n  errorMessage = \"\";\r\n  roles: string[] = [];\r\n  public loginForm: UntypedFormGroup;\r\n  public hide = true;\r\n  constructor(\r\n      public fb: UntypedFormBuilder,\r\n      public sharedService: SharedService,\r\n      public router:Router,\r\n      private authService: AuthService,\r\n      private tokenStorage: TokenStorageService\r\n      ) { }\r\n\r\n  ngOnInit() {\r\n    if (this.tokenStorage.getToken()) {\r\n      this.isLoggedIn = true;\r\n    } \r\n\r\n    \r\n\r\n\r\n\r\n    this.loginForm = this.fb.group({\r\n      username: [null, Validators.compose([Validators.required, Validators.minLength(6)])],\r\n      password: [null, Validators.compose([Validators.required, Validators.minLength(6)])],\r\n      rememberMe: false\r\n    });\r\n  }\r\n\r\n  onSubmit(formValues: NgForm): void {\r\n    const { username, password } = this.form;\r\n    this.authService.login(formValues.value.username, formValues.value.password).then(\r\n      (data: any) => {\r\n        this.tokenStorage.saveToken(data.token);\r\n        this.tokenStorage.saveUser(\r\n          this.tokenStorage.getDecodedAccessToken(data.token).sub\r\n        );\r\n        this.tokenStorage.saveRole(\r\n          this.tokenStorage.getDecodedAccessToken(data.token).aud\r\n        );\r\n        // this.tokenStorage.saveUser(data);\r\n\r\n        this.isLoginFailed = false;\r\n        this.isLoggedIn = true;\r\n        // this.roles = this.tokenStorage.getUser().roles;\r\n       \r\n        // Cette condition juste en bas permet de savoir nous venons de la page de detail de produit pour pas\r\n\r\n        if(sessionStorage.getItem(\"navigatedFrom\") && sessionStorage.getItem(\"navigatedFrom\") != null){\r\n          this.router.navigateByUrl(sessionStorage.getItem(\"navigatedFrom\"))\r\n          sessionStorage.removeItem(\"navigatedFrom\")\r\n        }\r\n        else{\r\n          this.router.navigateByUrl('/');\r\n        }\r\n      },\r\n      (err) => {\r\n        this.errorMessage = err.error.message;\r\n        this.isLoginFailed = true;\r\n      }\r\n    );\r\n  }\r\n\r\n  reloadPage(): void {\r\n    window.location.reload();\r\n  }\r\n\r\n  loginform = true;\r\n  recoverform = false;\r\n\r\n  showRecoverForm() {\r\n    this.loginform = !this.loginform;\r\n    this.recoverform = !this.recoverform;\r\n  }\r\n\r\n  public onLoginFormSubmit(values:Object):void {\r\n    if (this.loginForm.valid) {\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UntypedFormGroup, UntypedFormBuilder, Validators, NgForm} from '@angular/forms';\r\nimport { Router } from '@angular/router'; \r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { matchingPasswords, emailValidator } from 'src/app/theme/utils/app-validators';\r\nimport { User } from 'src/app/models/user';\r\nimport { AuthService } from 'src/_services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  public isdisabled= false\r\n  public user: User\r\n  public registerForm: UntypedFormGroup;\r\n  public hide = true;\r\n  public secondMotDePasse: any\r\n  public userTypes = [\r\n    { id: 1, name: 'Agent' },\r\n    { id: 2, name: 'Agency' },\r\n    { id: 3, name: 'Buyer' }\r\n  ];\r\n  constructor(\r\n      public fb: UntypedFormBuilder,\r\n      public router:Router,\r\n      public authService: AuthService,\r\n      public snackBar: MatSnackBar,\r\n      ) { \r\n    this.user= new User(\"\",\"\",\"\",\"\" ,\"\",[])\r\n    // this.user= new User(\"\",\"\",\"\",\"\",\"\",\"\", [])\r\n  }\r\n  ngOnInit() {\r\n   \r\n  }\r\n\r\n  onSubmit(formValues: NgForm){\r\n    this.user.roles.push('USER')\r\n     this.authService.register(this.user)\r\n       .subscribe(()=>{\r\n         alert(\"bonjour\")\r\n       },\r\n       (error)=>{\r\n\r\n       })\r\n  }\r\n\r\n  // public confirmationMotDePasse(premierMotDePasse, secondMotDePasse): Boolean{\r\n  //   if(premierMotDePasse!= secondMotDePasse){\r\n  //     return true\r\n  //   }\r\n  //   else{\r\n  //     return false\r\n  //   }\r\n  // }\r\n\r\n\r\n  public onRegisterFormSubmit(values:Object):void {\r\n    if (this.registerForm.valid) {\r\n      console.log(values);\r\n      this.snackBar.open('You registered successfully!', '×', { panelClass: 'success', verticalPosition: 'top', duration: 3000 });\r\n    }\r\n  }\r\n}\r\n","export class User {\r\n    constructor(\r\n        public prenom: any,\r\n        public nom: any,\r\n        public telephone: any,\r\n        public email: any,\r\n        public password: any,\r\n        public roles: Array<string>,\r\n\r\n       \r\n    ){}\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///"}